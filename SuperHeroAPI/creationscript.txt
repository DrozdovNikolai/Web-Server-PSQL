-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS ums.ums_user_auth_tokens
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    user_id integer NOT NULL,
    token text COLLATE pg_catalog."default" NOT NULL,
    expiration timestamp with time zone NOT NULL,
    is_revoked boolean NOT NULL DEFAULT false,
    revoked_at timestamp with time zone,
    CONSTRAINT user_auth_tokens_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ums.ums_users
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    username text COLLATE pg_catalog."default" NOT NULL,
    password_hash text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT ums_users_pkey PRIMARY KEY (id),
    CONSTRAINT ums_unique_username UNIQUE (username)
);

CREATE TABLE IF NOT EXISTS ums.ums_user_role
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    user_id integer NOT NULL,
    role_id integer NOT NULL,
    CONSTRAINT pk_user_role PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ums.ums_roles
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    role_name text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT ums_roles_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ums.ums_globalpermissions
(
    permission_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    role_id integer NOT NULL,
    create_table_grant boolean NOT NULL DEFAULT false,
    update_table_grant boolean NOT NULL DEFAULT false,
    delete_table_grant boolean NOT NULL DEFAULT false,
    create_grant boolean NOT NULL DEFAULT false,
    CONSTRAINT pk_globalpermissions PRIMARY KEY (permission_id)
);

CREATE TABLE IF NOT EXISTS ums.ums_permissions
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    role_id integer NOT NULL,
    table_name text COLLATE pg_catalog."default" NOT NULL,
    operation integer NOT NULL,
    CONSTRAINT pk_permissions PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ums.ums_function_user
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    function_name character varying COLLATE pg_catalog."default",
    user_id integer,
    CONSTRAINT function_user_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ums.ums_procedure_user
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    procedure_name character varying COLLATE pg_catalog."default",
    user_id integer,
    CONSTRAINT procedure_user_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ums.ums_table_user
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    tablename character varying COLLATE pg_catalog."default",
    user_id integer,
    CONSTRAINT table_user_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ums.ums_trigger_user
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    trigger_name character varying COLLATE pg_catalog."default",
    user_id integer,
    CONSTRAINT trigger_user_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ums.ums_request_logs
(
    id serial NOT NULL,
    user_id integer,
    path text COLLATE pg_catalog."default" NOT NULL,
    method character varying(10) COLLATE pg_catalog."default" NOT NULL,
    query_string text COLLATE pg_catalog."default" NOT NULL,
    request_body text COLLATE pg_catalog."default" NOT NULL,
    response_body text COLLATE pg_catalog."default" NOT NULL,
    status_code integer NOT NULL,
    request_time timestamp without time zone NOT NULL,
    response_time timestamp without time zone NOT NULL,
    duration interval NOT NULL,
    ip_address character varying(45) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT ums_request_logs_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS ums.ums_user_auth_tokens
    ADD CONSTRAINT fk_user_id FOREIGN KEY (id)
    REFERENCES ums.ums_users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS user_auth_tokens_pkey
    ON ums.ums_user_auth_tokens(id);


ALTER TABLE IF EXISTS ums.ums_user_role
    ADD CONSTRAINT fk_user_role_roles_role_id FOREIGN KEY (role_id)
    REFERENCES ums.ums_roles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "IX_UserRole_RoleId"
    ON ums.ums_user_role(role_id);


ALTER TABLE IF EXISTS ums.ums_user_role
    ADD CONSTRAINT fk_user_role_users_user_id FOREIGN KEY (user_id)
    REFERENCES ums.ums_users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "IX_UserRole_UserId"
    ON ums.ums_user_role(user_id);


ALTER TABLE IF EXISTS ums.ums_globalpermissions
    ADD CONSTRAINT fk_role_id FOREIGN KEY (role_id)
    REFERENCES ums.ums_roles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ums.ums_permissions
    ADD CONSTRAINT fk_role_id FOREIGN KEY (role_id)
    REFERENCES ums.ums_roles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ums.ums_function_user
    ADD CONSTRAINT function_user_fk FOREIGN KEY (user_id)
    REFERENCES ums.ums_users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS ums.ums_procedure_user
    ADD CONSTRAINT procedure_user_fk FOREIGN KEY (user_id)
    REFERENCES ums.ums_users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS ums.ums_table_user
    ADD CONSTRAINT table_user_fk FOREIGN KEY (user_id)
    REFERENCES ums.ums_users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS ums.ums_trigger_user
    ADD CONSTRAINT trigger_user_fk FOREIGN KEY (user_id)
    REFERENCES ums.ums_users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS ums.ums_request_logs
    ADD CONSTRAINT fk_user FOREIGN KEY (user_id)
    REFERENCES ums.ums_users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_request_logs_user_id
    ON ums.ums_request_logs(user_id);

END;